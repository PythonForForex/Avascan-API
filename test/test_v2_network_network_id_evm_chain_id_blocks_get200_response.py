# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.v2_network_network_id_evm_chain_id_blocks_get200_response import V2NetworkNetworkIdEvmChainIdBlocksGet200Response

class TestV2NetworkNetworkIdEvmChainIdBlocksGet200Response(unittest.TestCase):
    """V2NetworkNetworkIdEvmChainIdBlocksGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2NetworkNetworkIdEvmChainIdBlocksGet200Response:
        """Test V2NetworkNetworkIdEvmChainIdBlocksGet200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2NetworkNetworkIdEvmChainIdBlocksGet200Response`
        """
        model = V2NetworkNetworkIdEvmChainIdBlocksGet200Response()
        if include_optional:
            return V2NetworkNetworkIdEvmChainIdBlocksGet200Response(
                items = [
                    openapi_client.models._v2_network__network_id__evm__chain_id__blocks_get_200_response_items_inner._v2_network__networkId__evm__chainId__blocks_get_200_response_items_inner(
                        number = 1.337, 
                        id = '', 
                        parent = '', 
                        chain_id = '', 
                        ecosystems = [
                            ''
                            ], 
                        size = '', 
                        volume = '', 
                        gas_limit = '', 
                        gas_used = '', 
                        atomic = True, 
                        transactions = [
                            ''
                            ], 
                        burned_fees = '', 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_block_number = 1.337, )
                    ],
                count = 1.337,
                count_type = 'exact',
                link = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_link._v2_network__networkId__evm_cross_transactions_get_200_response_link(
                    next = '', 
                    next_token = '', )
            )
        else:
            return V2NetworkNetworkIdEvmChainIdBlocksGet200Response(
                items = [
                    openapi_client.models._v2_network__network_id__evm__chain_id__blocks_get_200_response_items_inner._v2_network__networkId__evm__chainId__blocks_get_200_response_items_inner(
                        number = 1.337, 
                        id = '', 
                        parent = '', 
                        chain_id = '', 
                        ecosystems = [
                            ''
                            ], 
                        size = '', 
                        volume = '', 
                        gas_limit = '', 
                        gas_used = '', 
                        atomic = True, 
                        transactions = [
                            ''
                            ], 
                        burned_fees = '', 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_block_number = 1.337, )
                    ],
                link = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_link._v2_network__networkId__evm_cross_transactions_get_200_response_link(
                    next = '', 
                    next_token = '', ),
        )
        """

    def testV2NetworkNetworkIdEvmChainIdBlocksGet200Response(self):
        """Test V2NetworkNetworkIdEvmChainIdBlocksGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
