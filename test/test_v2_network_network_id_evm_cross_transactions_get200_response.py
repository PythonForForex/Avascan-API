# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.v2_network_network_id_evm_cross_transactions_get200_response import V2NetworkNetworkIdEvmCrossTransactionsGet200Response

class TestV2NetworkNetworkIdEvmCrossTransactionsGet200Response(unittest.TestCase):
    """V2NetworkNetworkIdEvmCrossTransactionsGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2NetworkNetworkIdEvmCrossTransactionsGet200Response:
        """Test V2NetworkNetworkIdEvmCrossTransactionsGet200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2NetworkNetworkIdEvmCrossTransactionsGet200Response`
        """
        model = V2NetworkNetworkIdEvmCrossTransactionsGet200Response()
        if include_optional:
            return V2NetworkNetworkIdEvmCrossTransactionsGet200Response(
                items = [
                    openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_items_inner._v2_network__networkId__evm_cross_transactions_get_200_response_items_inner(
                        type = 'opStackPreBedrockTx', 
                        status = 'pending', 
                        src_chain_id = '', 
                        src_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        src_tx_hash = '', 
                        src_block_number = '', 
                        src_block_hash = '', 
                        src_gas_limit = '', 
                        dst_chain_id = '', 
                        dst_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        dst_tx_hash = '', 
                        dst_block_number = '', 
                        dst_block_hash = '', 
                        dst_gas_limit = '', 
                        from = '0x0000000000000000000000000000000000000000', 
                        to = '0x0000000000000000000000000000000000000000', 
                        data = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_items_inner_data._v2_network__networkId__evm_cross_transactions_get_200_response_items_inner_data(
                            queue_index = '', 
                            requested_gas_limit = '', 
                            l1_tx_origin = '', 
                            message_nonce = '', 
                            message_hash = '', 
                            source_hash = '', 
                            withdrawal_hash = '', 
                            proof_tx_hash = '', 
                            proof_tx_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            success = True, ), )
                    ],
                count = 1.337,
                count_type = 'exact',
                link = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_link._v2_network__networkId__evm_cross_transactions_get_200_response_link(
                    next = '', 
                    next_token = '', )
            )
        else:
            return V2NetworkNetworkIdEvmCrossTransactionsGet200Response(
                items = [
                    openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_items_inner._v2_network__networkId__evm_cross_transactions_get_200_response_items_inner(
                        type = 'opStackPreBedrockTx', 
                        status = 'pending', 
                        src_chain_id = '', 
                        src_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        src_tx_hash = '', 
                        src_block_number = '', 
                        src_block_hash = '', 
                        src_gas_limit = '', 
                        dst_chain_id = '', 
                        dst_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        dst_tx_hash = '', 
                        dst_block_number = '', 
                        dst_block_hash = '', 
                        dst_gas_limit = '', 
                        from = '0x0000000000000000000000000000000000000000', 
                        to = '0x0000000000000000000000000000000000000000', 
                        data = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_items_inner_data._v2_network__networkId__evm_cross_transactions_get_200_response_items_inner_data(
                            queue_index = '', 
                            requested_gas_limit = '', 
                            l1_tx_origin = '', 
                            message_nonce = '', 
                            message_hash = '', 
                            source_hash = '', 
                            withdrawal_hash = '', 
                            proof_tx_hash = '', 
                            proof_tx_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            success = True, ), )
                    ],
                link = openapi_client.models._v2_network__network_id__evm_cross_transactions_get_200_response_link._v2_network__networkId__evm_cross_transactions_get_200_response_link(
                    next = '', 
                    next_token = '', ),
        )
        """

    def testV2NetworkNetworkIdEvmCrossTransactionsGet200Response(self):
        """Test V2NetworkNetworkIdEvmCrossTransactionsGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
