# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.v2_network_network_id_pvm_blockchain_id_address_address_id_transactions_get200_response_items_inner_inputs_inner import V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner

class TestV2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner(unittest.TestCase):
    """V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner:
        """Test V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner`
        """
        model = V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner()
        if include_optional:
            return V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner(
                id = '',
                tx_id = '',
                index = 1.337,
                amount = '',
                owner = openapi_client.models._v2_network__network_id__pvm__blockchain_id__address__address_id__transactions_get_200_response_items_inner_inputs_inner_owner._v2_network__networkId__pvm__blockchainId__address__addressId__transactions_get_200_response_items_inner_inputs_inner_owner(
                    addresses = [
                        ''
                        ], 
                    threshold = 1.337, ),
                creds = [
                    openapi_client.models._v2_network__network_id__avm__blockchain_id__address__address_id__transactions_get_200_response_items_inner_inputs_inner_creds_inner._v2_network__networkId__avm__blockchainId__address__addressId__transactions_get_200_response_items_inner_inputs_inner_creds_inner(
                        address = '', )
                    ],
                src_chain = '',
                asset = openapi_client.models._v2_network__network_id__avm__blockchain_id__address__address_id__transactions_get_200_response_items_inner_inputs_inner_asset._v2_network__networkId__avm__blockchainId__address__addressId__transactions_get_200_response_items_inner_inputs_inner_asset(
                    id = '', 
                    name = '', 
                    symbol = '', 
                    denomination = 1.337, 
                    type = 'fixed_cap', )
            )
        else:
            return V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner(
                id = '',
                tx_id = '',
                index = 1.337,
                amount = '',
                creds = [
                    openapi_client.models._v2_network__network_id__avm__blockchain_id__address__address_id__transactions_get_200_response_items_inner_inputs_inner_creds_inner._v2_network__networkId__avm__blockchainId__address__addressId__transactions_get_200_response_items_inner_inputs_inner_creds_inner(
                        address = '', )
                    ],
        )
        """

    def testV2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner(self):
        """Test V2NetworkNetworkIdPvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
