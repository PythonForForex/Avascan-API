# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.v2_network_network_id_staking_address_address_id_get200_response_from_validations import V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations

class TestV2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations(unittest.TestCase):
    """V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations:
        """Test V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations`
        """
        model = V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations()
        if include_optional:
            return V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations(
                from_staking = '',
                fees = '',
                total_rewards = ''
            )
        else:
            return V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations(
                from_staking = '',
                fees = '',
                total_rewards = '',
        )
        """

    def testV2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations(self):
        """Test V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
