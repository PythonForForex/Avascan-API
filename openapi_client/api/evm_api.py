# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union

from openapi_client.models.v2_network_network_id_evm_chain_id_blocks_get200_response import V2NetworkNetworkIdEvmChainIdBlocksGet200Response
from openapi_client.models.v2_network_network_id_evm_cross_transactions_get200_response import V2NetworkNetworkIdEvmCrossTransactionsGet200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class EVMApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v2_network_network_id_evm_chain_id_blocks_get(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        count: Optional[StrictBool] = None,
        timestamp_from: Optional[datetime] = None,
        timestamp_to: Optional[datetime] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V2NetworkNetworkIdEvmChainIdBlocksGet200Response:
        """v2_network_network_id_evm_chain_id_blocks_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param count:
        :type count: bool
        :param timestamp_from:
        :type timestamp_from: datetime
        :param timestamp_to:
        :type timestamp_to: datetime
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param sort:
        :type sort: str
        :param next:
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_blocks_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            count=count,
            timestamp_from=timestamp_from,
            timestamp_to=timestamp_to,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            sort=sort,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmChainIdBlocksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v2_network_network_id_evm_chain_id_blocks_get_with_http_info(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        count: Optional[StrictBool] = None,
        timestamp_from: Optional[datetime] = None,
        timestamp_to: Optional[datetime] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V2NetworkNetworkIdEvmChainIdBlocksGet200Response]:
        """v2_network_network_id_evm_chain_id_blocks_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param count:
        :type count: bool
        :param timestamp_from:
        :type timestamp_from: datetime
        :param timestamp_to:
        :type timestamp_to: datetime
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param sort:
        :type sort: str
        :param next:
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_blocks_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            count=count,
            timestamp_from=timestamp_from,
            timestamp_to=timestamp_to,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            sort=sort,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmChainIdBlocksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v2_network_network_id_evm_chain_id_blocks_get_without_preload_content(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        count: Optional[StrictBool] = None,
        timestamp_from: Optional[datetime] = None,
        timestamp_to: Optional[datetime] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """v2_network_network_id_evm_chain_id_blocks_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param count:
        :type count: bool
        :param timestamp_from:
        :type timestamp_from: datetime
        :param timestamp_to:
        :type timestamp_to: datetime
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param sort:
        :type sort: str
        :param next:
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_blocks_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            count=count,
            timestamp_from=timestamp_from,
            timestamp_to=timestamp_to,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            sort=sort,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmChainIdBlocksGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v2_network_network_id_evm_chain_id_blocks_get_serialize(
        self,
        network_id,
        chain_id,
        count,
        timestamp_from,
        timestamp_to,
        ecosystem,
        included_chain_ids,
        excluded_chain_ids,
        sort,
        next,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        if chain_id is not None:
            _path_params['chainId'] = chain_id
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if timestamp_from is not None:
            if isinstance(timestamp_from, datetime):
                _query_params.append(
                    (
                        'timestampFrom',
                        timestamp_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('timestampFrom', timestamp_from))
            
        if timestamp_to is not None:
            if isinstance(timestamp_to, datetime):
                _query_params.append(
                    (
                        'timestampTo',
                        timestamp_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('timestampTo', timestamp_to))
            
        if ecosystem is not None:
            
            _query_params.append(('ecosystem', ecosystem))
            
        if included_chain_ids is not None:
            
            _query_params.append(('includedChainIds', included_chain_ids))
            
        if excluded_chain_ids is not None:
            
            _query_params.append(('excludedChainIds', excluded_chain_ids))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if next is not None:
            
            _query_params.append(('next', next))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/network/{networkId}/evm/{chainId}/blocks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_get(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_get_with_http_info(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_get_without_preload_content(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_get


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_get_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v2_network_network_id_evm_chain_id_etherscanwildcard_get_serialize(
        self,
        network_id,
        chain_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        if chain_id is not None:
            _path_params['chainId'] = chain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/network/{networkId}/evm/{chainId}/etherscan{wildcard}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_post(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_post


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_post_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_post_with_http_info(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_post


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_post_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v2_network_network_id_evm_chain_id_etherscanwildcard_post_without_preload_content(
        self,
        network_id: StrictStr,
        chain_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """v2_network_network_id_evm_chain_id_etherscanwildcard_post


        :param network_id: (required)
        :type network_id: str
        :param chain_id: (required)
        :type chain_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_chain_id_etherscanwildcard_post_serialize(
            network_id=network_id,
            chain_id=chain_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v2_network_network_id_evm_chain_id_etherscanwildcard_post_serialize(
        self,
        network_id,
        chain_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        if chain_id is not None:
            _path_params['chainId'] = chain_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/network/{networkId}/evm/{chainId}/etherscan{wildcard}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v2_network_network_id_evm_cross_transactions_get(
        self,
        network_id: StrictStr,
        src_chain_ids: Optional[List[StrictStr]] = None,
        dst_chain_ids: Optional[List[StrictStr]] = None,
        src_ecosystem: Optional[StrictStr] = None,
        dst_ecosystem: Optional[StrictStr] = None,
        count: Optional[StrictBool] = None,
        types: Optional[List[StrictStr]] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Max value: 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V2NetworkNetworkIdEvmCrossTransactionsGet200Response:
        """v2_network_network_id_evm_cross_transactions_get


        :param network_id: (required)
        :type network_id: str
        :param src_chain_ids:
        :type src_chain_ids: List[str]
        :param dst_chain_ids:
        :type dst_chain_ids: List[str]
        :param src_ecosystem:
        :type src_ecosystem: str
        :param dst_ecosystem:
        :type dst_ecosystem: str
        :param count:
        :type count: bool
        :param types:
        :type types: List[str]
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param next:
        :type next: str
        :param limit: Max value: 100
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_cross_transactions_get_serialize(
            network_id=network_id,
            src_chain_ids=src_chain_ids,
            dst_chain_ids=dst_chain_ids,
            src_ecosystem=src_ecosystem,
            dst_ecosystem=dst_ecosystem,
            count=count,
            types=types,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            next=next,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmCrossTransactionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v2_network_network_id_evm_cross_transactions_get_with_http_info(
        self,
        network_id: StrictStr,
        src_chain_ids: Optional[List[StrictStr]] = None,
        dst_chain_ids: Optional[List[StrictStr]] = None,
        src_ecosystem: Optional[StrictStr] = None,
        dst_ecosystem: Optional[StrictStr] = None,
        count: Optional[StrictBool] = None,
        types: Optional[List[StrictStr]] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Max value: 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V2NetworkNetworkIdEvmCrossTransactionsGet200Response]:
        """v2_network_network_id_evm_cross_transactions_get


        :param network_id: (required)
        :type network_id: str
        :param src_chain_ids:
        :type src_chain_ids: List[str]
        :param dst_chain_ids:
        :type dst_chain_ids: List[str]
        :param src_ecosystem:
        :type src_ecosystem: str
        :param dst_ecosystem:
        :type dst_ecosystem: str
        :param count:
        :type count: bool
        :param types:
        :type types: List[str]
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param next:
        :type next: str
        :param limit: Max value: 100
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_cross_transactions_get_serialize(
            network_id=network_id,
            src_chain_ids=src_chain_ids,
            dst_chain_ids=dst_chain_ids,
            src_ecosystem=src_ecosystem,
            dst_ecosystem=dst_ecosystem,
            count=count,
            types=types,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            next=next,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmCrossTransactionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v2_network_network_id_evm_cross_transactions_get_without_preload_content(
        self,
        network_id: StrictStr,
        src_chain_ids: Optional[List[StrictStr]] = None,
        dst_chain_ids: Optional[List[StrictStr]] = None,
        src_ecosystem: Optional[StrictStr] = None,
        dst_ecosystem: Optional[StrictStr] = None,
        count: Optional[StrictBool] = None,
        types: Optional[List[StrictStr]] = None,
        ecosystem: Optional[StrictStr] = None,
        included_chain_ids: Optional[StrictStr] = None,
        excluded_chain_ids: Optional[StrictStr] = None,
        next: Optional[StrictStr] = None,
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Max value: 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """v2_network_network_id_evm_cross_transactions_get


        :param network_id: (required)
        :type network_id: str
        :param src_chain_ids:
        :type src_chain_ids: List[str]
        :param dst_chain_ids:
        :type dst_chain_ids: List[str]
        :param src_ecosystem:
        :type src_ecosystem: str
        :param dst_ecosystem:
        :type dst_ecosystem: str
        :param count:
        :type count: bool
        :param types:
        :type types: List[str]
        :param ecosystem:
        :type ecosystem: str
        :param included_chain_ids:
        :type included_chain_ids: str
        :param excluded_chain_ids:
        :type excluded_chain_ids: str
        :param next:
        :type next: str
        :param limit: Max value: 100
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v2_network_network_id_evm_cross_transactions_get_serialize(
            network_id=network_id,
            src_chain_ids=src_chain_ids,
            dst_chain_ids=dst_chain_ids,
            src_ecosystem=src_ecosystem,
            dst_ecosystem=dst_ecosystem,
            count=count,
            types=types,
            ecosystem=ecosystem,
            included_chain_ids=included_chain_ids,
            excluded_chain_ids=excluded_chain_ids,
            next=next,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V2NetworkNetworkIdEvmCrossTransactionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v2_network_network_id_evm_cross_transactions_get_serialize(
        self,
        network_id,
        src_chain_ids,
        dst_chain_ids,
        src_ecosystem,
        dst_ecosystem,
        count,
        types,
        ecosystem,
        included_chain_ids,
        excluded_chain_ids,
        next,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'srcChainIds': 'multi',
            'dstChainIds': 'multi',
            'types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['networkId'] = network_id
        # process the query parameters
        if src_chain_ids is not None:
            
            _query_params.append(('srcChainIds', src_chain_ids))
            
        if dst_chain_ids is not None:
            
            _query_params.append(('dstChainIds', dst_chain_ids))
            
        if src_ecosystem is not None:
            
            _query_params.append(('srcEcosystem', src_ecosystem))
            
        if dst_ecosystem is not None:
            
            _query_params.append(('dstEcosystem', dst_ecosystem))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if ecosystem is not None:
            
            _query_params.append(('ecosystem', ecosystem))
            
        if included_chain_ids is not None:
            
            _query_params.append(('includedChainIds', included_chain_ids))
            
        if excluded_chain_ids is not None:
            
            _query_params.append(('excludedChainIds', excluded_chain_ids))
            
        if next is not None:
            
            _query_params.append(('next', next))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/network/{networkId}/evm/cross-transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


