# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from pydantic import Field
from openapi_client.models.v2_network_network_id_staking_address_address_id_get200_response_from_validations import V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations
from openapi_client.models.v2_network_network_id_staking_address_address_id_get200_response_staking_rewards import V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseStakingRewards
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V2NetworkNetworkIdStakingAddressAddressIdGet200Response(BaseModel):
    """
    V2NetworkNetworkIdStakingAddressAddressIdGet200Response
    """ # noqa: E501
    staking_rewards: V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseStakingRewards = Field(alias="stakingRewards")
    from_validations: V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations = Field(alias="fromValidations")
    from_delegations: V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations = Field(alias="fromDelegations")
    __properties: ClassVar[List[str]] = ["stakingRewards", "fromValidations", "fromDelegations"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V2NetworkNetworkIdStakingAddressAddressIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of staking_rewards
        if self.staking_rewards:
            _dict['stakingRewards'] = self.staking_rewards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_validations
        if self.from_validations:
            _dict['fromValidations'] = self.from_validations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_delegations
        if self.from_delegations:
            _dict['fromDelegations'] = self.from_delegations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V2NetworkNetworkIdStakingAddressAddressIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stakingRewards": V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseStakingRewards.from_dict(obj.get("stakingRewards")) if obj.get("stakingRewards") is not None else None,
            "fromValidations": V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations.from_dict(obj.get("fromValidations")) if obj.get("fromValidations") is not None else None,
            "fromDelegations": V2NetworkNetworkIdStakingAddressAddressIdGet200ResponseFromValidations.from_dict(obj.get("fromDelegations")) if obj.get("fromDelegations") is not None else None
        })
        return _obj


