# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V2NetworkNetworkIdEvmChainIdBlocksGet200ResponseItemsInner(BaseModel):
    """
    V2NetworkNetworkIdEvmChainIdBlocksGet200ResponseItemsInner
    """ # noqa: E501
    number: Union[StrictFloat, StrictInt]
    id: StrictStr
    parent: StrictStr
    chain_id: StrictStr = Field(alias="chainId")
    ecosystems: Optional[List[StrictStr]] = None
    size: StrictStr
    volume: StrictStr
    gas_limit: StrictStr = Field(alias="gasLimit")
    gas_used: StrictStr = Field(alias="gasUsed")
    atomic: StrictBool
    transactions: List[StrictStr]
    burned_fees: StrictStr = Field(alias="burnedFees")
    timestamp: datetime
    current_block_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentBlockNumber")
    __properties: ClassVar[List[str]] = ["number", "id", "parent", "chainId", "ecosystems", "size", "volume", "gasLimit", "gasUsed", "atomic", "transactions", "burnedFees", "timestamp", "currentBlockNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmChainIdBlocksGet200ResponseItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmChainIdBlocksGet200ResponseItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "id": obj.get("id"),
            "parent": obj.get("parent"),
            "chainId": obj.get("chainId"),
            "ecosystems": obj.get("ecosystems"),
            "size": obj.get("size"),
            "volume": obj.get("volume"),
            "gasLimit": obj.get("gasLimit"),
            "gasUsed": obj.get("gasUsed"),
            "atomic": obj.get("atomic"),
            "transactions": obj.get("transactions"),
            "burnedFees": obj.get("burnedFees"),
            "timestamp": obj.get("timestamp"),
            "currentBlockNumber": obj.get("currentBlockNumber")
        })
        return _obj


