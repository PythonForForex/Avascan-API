# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.v2_network_network_id_avm_blockchain_id_address_address_id_transactions_get200_response_items_inner_inputs_inner_asset import V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerAsset
from openapi_client.models.v2_network_network_id_avm_blockchain_id_address_address_id_transactions_get200_response_items_inner_inputs_inner_creds_inner import V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerCredsInner
from openapi_client.models.v2_network_network_id_avm_blockchain_id_address_address_id_transactions_get200_response_items_inner_inputs_inner_owner import V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerOwner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner(BaseModel):
    """
    V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner
    """ # noqa: E501
    id: StrictStr
    tx_id: StrictStr = Field(alias="txId")
    index: Union[StrictFloat, StrictInt]
    amount: StrictStr
    src_chain: Optional[StrictStr] = Field(default=None, description="Populated if this UTXO results from an import", alias="srcChain")
    dst_chain: Optional[StrictStr] = Field(default=None, description="Populated if this UTXO results from an export", alias="dstChain")
    owner: V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerOwner
    locktime: Optional[Union[StrictFloat, StrictInt]] = None
    creds: Optional[List[V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerCredsInner]] = None
    asset: Optional[V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerAsset] = None
    __properties: ClassVar[List[str]] = ["id", "txId", "index", "amount", "srcChain", "dstChain", "owner", "locktime", "creds", "asset"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in creds (list)
        _items = []
        if self.creds:
            for _item in self.creds:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creds'] = _items
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "txId": obj.get("txId"),
            "index": obj.get("index"),
            "amount": obj.get("amount"),
            "srcChain": obj.get("srcChain"),
            "dstChain": obj.get("dstChain"),
            "owner": V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerOwner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "locktime": obj.get("locktime"),
            "creds": [V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerCredsInner.from_dict(_item) for _item in obj.get("creds")] if obj.get("creds") is not None else None,
            "asset": V2NetworkNetworkIdAvmBlockchainIdAddressAddressIdTransactionsGet200ResponseItemsInnerInputsInnerAsset.from_dict(obj.get("asset")) if obj.get("asset") is not None else None
        })
        return _obj


