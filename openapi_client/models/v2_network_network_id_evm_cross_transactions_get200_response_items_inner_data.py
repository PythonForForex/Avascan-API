# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInnerData(BaseModel):
    """
    V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInnerData
    """ # noqa: E501
    queue_index: Optional[StrictStr] = Field(default=None, alias="queueIndex")
    requested_gas_limit: Optional[StrictStr] = Field(default=None, alias="requestedGasLimit")
    l1_tx_origin: Optional[StrictStr] = Field(default=None, alias="l1TxOrigin")
    message_nonce: Optional[StrictStr] = Field(default=None, alias="messageNonce")
    message_hash: Optional[StrictStr] = Field(default=None, alias="messageHash")
    source_hash: Optional[StrictStr] = Field(default=None, alias="sourceHash")
    withdrawal_hash: Optional[StrictStr] = Field(default=None, alias="withdrawalHash")
    proof_tx_hash: Optional[StrictStr] = Field(default=None, alias="proofTxHash")
    proof_tx_timestamp: Optional[datetime] = Field(default=None, alias="proofTxTimestamp")
    success: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["queueIndex", "requestedGasLimit", "l1TxOrigin", "messageNonce", "messageHash", "sourceHash", "withdrawalHash", "proofTxHash", "proofTxTimestamp", "success"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInnerData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInnerData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queueIndex": obj.get("queueIndex"),
            "requestedGasLimit": obj.get("requestedGasLimit"),
            "l1TxOrigin": obj.get("l1TxOrigin"),
            "messageNonce": obj.get("messageNonce"),
            "messageHash": obj.get("messageHash"),
            "sourceHash": obj.get("sourceHash"),
            "withdrawalHash": obj.get("withdrawalHash"),
            "proofTxHash": obj.get("proofTxHash"),
            "proofTxTimestamp": obj.get("proofTxTimestamp"),
            "success": obj.get("success")
        })
        return _obj


