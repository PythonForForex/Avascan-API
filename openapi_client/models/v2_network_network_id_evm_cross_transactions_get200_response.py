# coding: utf-8

"""
    Avascan API

    Avalanche multi-chain explorer API docs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.v2_network_network_id_evm_cross_transactions_get200_response_items_inner import V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInner
from openapi_client.models.v2_network_network_id_evm_cross_transactions_get200_response_link import V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseLink
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V2NetworkNetworkIdEvmCrossTransactionsGet200Response(BaseModel):
    """
    V2NetworkNetworkIdEvmCrossTransactionsGet200Response
    """ # noqa: E501
    items: List[V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInner]
    count: Optional[Union[StrictFloat, StrictInt]] = None
    count_type: Optional[StrictStr] = Field(default=None, alias="countType")
    link: V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseLink
    __properties: ClassVar[List[str]] = ["items", "count", "countType", "link"]

    @field_validator('count_type')
    def count_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('exact', 'lowerBound', 'approx'):
            raise ValueError("must be one of enum values ('exact', 'lowerBound', 'approx')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmCrossTransactionsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V2NetworkNetworkIdEvmCrossTransactionsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseItemsInner.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "count": obj.get("count"),
            "countType": obj.get("countType"),
            "link": V2NetworkNetworkIdEvmCrossTransactionsGet200ResponseLink.from_dict(obj.get("link")) if obj.get("link") is not None else None
        })
        return _obj


